'use strict';

/**
 * @file test script for src/LazadaRequest
 */
var LazadaRequest = require('../LazadaRequest');

var isResponseSuccessful = LazadaRequest.isResponseSuccessful,
    getSystemQueryParamObject = LazadaRequest.getSystemQueryParamObject;


describe('test LazadaRequest.js', function () {
  test('test [POST] getSystemQueryParamObject ', function () {
    var key = '1234';
    var secret = 'Aefi1239aspb203FS';
    var api = '/test/api';
    var token = 'abc321';
    var body = {
      foo: 1,
      bar: 2,
      foo_bar: 3,
      foobar: 4
    };
    var qs = getSystemQueryParamObject(key, secret, api, token, body);
    expect(qs).toMatchObject({
      app_key: '1234',
      timestamp: expect.any(String),
      sign_method: 'sha256',
      sign: expect.any(String)
    });
  });
  test('test [GET] getSystemQueryParamObject', function () {
    var key = '1234';
    var secret = 'Aefi1239aspb203FS';
    var api = '/test/api';
    var token = 'abc321';
    var params = {
      foo: 1,
      bar: 2,
      foo_bar: 3,
      foobar: 4
    };
    var qs = Object.assign({}, getSystemQueryParamObject(key, secret, api, token, params), params);
    expect(qs).toMatchObject({
      foo: 1,
      bar: 2,
      foo_bar: 3,
      foobar: 4,
      app_key: '1234',
      timestamp: expect.any(String),
      sign_method: 'sha256',
      sign: expect.any(String)
    });
  });
  test('test isResponseSuccessful', function () {
    expect(isResponseSuccessful(null)).toBe(false);
    expect(isResponseSuccessful(undefined)).toBe(false);
    expect(isResponseSuccessful({ foo: 'bar' })).toBe(false);
    expect(isResponseSuccessful({ code: '' })).toBe(false);
    expect(isResponseSuccessful({ code: 'MissingParams' })).toBe(false);
    expect(isResponseSuccessful({ code: '0' })).toBe(true);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fX3Rlc3RzX18vTGF6YWRhUmVxdWVzdC50ZXN0LmpzIl0sIm5hbWVzIjpbIkxhemFkYVJlcXVlc3QiLCJyZXF1aXJlIiwiaXNSZXNwb25zZVN1Y2Nlc3NmdWwiLCJnZXRTeXN0ZW1RdWVyeVBhcmFtT2JqZWN0IiwiZGVzY3JpYmUiLCJ0ZXN0Iiwia2V5Iiwic2VjcmV0IiwiYXBpIiwidG9rZW4iLCJib2R5IiwiZm9vIiwiYmFyIiwiZm9vX2JhciIsImZvb2JhciIsInFzIiwiZXhwZWN0IiwidG9NYXRjaE9iamVjdCIsImFwcF9rZXkiLCJ0aW1lc3RhbXAiLCJhbnkiLCJTdHJpbmciLCJzaWduX21ldGhvZCIsInNpZ24iLCJwYXJhbXMiLCJPYmplY3QiLCJhc3NpZ24iLCJ0b0JlIiwidW5kZWZpbmVkIiwiY29kZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7O0FBR0EsSUFBTUEsZ0JBQWdCQywyQkFBdEI7O0lBRVFDLG9CLEdBQW9ERixhLENBQXBERSxvQjtJQUFzQkMseUIsR0FBOEJILGEsQ0FBOUJHLHlCOzs7QUFFOUJDLFNBQVMsdUJBQVQsRUFBa0MsWUFBTTtBQUN0Q0MsT0FBSyx3Q0FBTCxFQUErQyxZQUFNO0FBQ25ELFFBQU1DLE1BQU0sTUFBWjtBQUNBLFFBQU1DLFNBQVMsbUJBQWY7QUFDQSxRQUFNQyxNQUFNLFdBQVo7QUFDQSxRQUFNQyxRQUFRLFFBQWQ7QUFDQSxRQUFNQyxPQUFPO0FBQ1hDLFdBQUssQ0FETTtBQUVYQyxXQUFLLENBRk07QUFHWEMsZUFBUyxDQUhFO0FBSVhDLGNBQVE7QUFKRyxLQUFiO0FBTUEsUUFBTUMsS0FBS1osMEJBQTBCRyxHQUExQixFQUErQkMsTUFBL0IsRUFBdUNDLEdBQXZDLEVBQTRDQyxLQUE1QyxFQUFtREMsSUFBbkQsQ0FBWDtBQUNBTSxXQUFPRCxFQUFQLEVBQVdFLGFBQVgsQ0FBeUI7QUFDdkJDLGVBQVMsTUFEYztBQUV2QkMsaUJBQVdILE9BQU9JLEdBQVAsQ0FBV0MsTUFBWCxDQUZZO0FBR3ZCQyxtQkFBYSxRQUhVO0FBSXZCQyxZQUFNUCxPQUFPSSxHQUFQLENBQVdDLE1BQVg7QUFKaUIsS0FBekI7QUFNRCxHQWxCRDtBQW1CQWhCLE9BQUssc0NBQUwsRUFBNkMsWUFBTTtBQUNqRCxRQUFNQyxNQUFNLE1BQVo7QUFDQSxRQUFNQyxTQUFTLG1CQUFmO0FBQ0EsUUFBTUMsTUFBTSxXQUFaO0FBQ0EsUUFBTUMsUUFBUSxRQUFkO0FBQ0EsUUFBTWUsU0FBUztBQUNiYixXQUFLLENBRFE7QUFFYkMsV0FBSyxDQUZRO0FBR2JDLGVBQVMsQ0FISTtBQUliQyxjQUFRO0FBSkssS0FBZjtBQU1BLFFBQU1DLEtBQUtVLE9BQU9DLE1BQVAsQ0FDVCxFQURTLEVBRVR2QiwwQkFBMEJHLEdBQTFCLEVBQStCQyxNQUEvQixFQUF1Q0MsR0FBdkMsRUFBNENDLEtBQTVDLEVBQW1EZSxNQUFuRCxDQUZTLEVBR1RBLE1BSFMsQ0FBWDtBQUtBUixXQUFPRCxFQUFQLEVBQVdFLGFBQVgsQ0FBeUI7QUFDdkJOLFdBQUssQ0FEa0I7QUFFdkJDLFdBQUssQ0FGa0I7QUFHdkJDLGVBQVMsQ0FIYztBQUl2QkMsY0FBUSxDQUplO0FBS3ZCSSxlQUFTLE1BTGM7QUFNdkJDLGlCQUFXSCxPQUFPSSxHQUFQLENBQVdDLE1BQVgsQ0FOWTtBQU92QkMsbUJBQWEsUUFQVTtBQVF2QkMsWUFBTVAsT0FBT0ksR0FBUCxDQUFXQyxNQUFYO0FBUmlCLEtBQXpCO0FBVUQsR0ExQkQ7QUEyQkFoQixPQUFLLDJCQUFMLEVBQWtDLFlBQU07QUFDdENXLFdBQU9kLHFCQUFxQixJQUFyQixDQUFQLEVBQW1DeUIsSUFBbkMsQ0FBd0MsS0FBeEM7QUFDQVgsV0FBT2QscUJBQXFCMEIsU0FBckIsQ0FBUCxFQUF3Q0QsSUFBeEMsQ0FBNkMsS0FBN0M7QUFDQVgsV0FBT2QscUJBQXFCLEVBQUVTLEtBQUssS0FBUCxFQUFyQixDQUFQLEVBQTZDZ0IsSUFBN0MsQ0FBa0QsS0FBbEQ7QUFDQVgsV0FBT2QscUJBQXFCLEVBQUUyQixNQUFNLEVBQVIsRUFBckIsQ0FBUCxFQUEyQ0YsSUFBM0MsQ0FBZ0QsS0FBaEQ7QUFDQVgsV0FBT2QscUJBQXFCLEVBQUUyQixNQUFNLGVBQVIsRUFBckIsQ0FBUCxFQUF3REYsSUFBeEQsQ0FBNkQsS0FBN0Q7QUFDQVgsV0FBT2QscUJBQXFCLEVBQUUyQixNQUFNLEdBQVIsRUFBckIsQ0FBUCxFQUE0Q0YsSUFBNUMsQ0FBaUQsSUFBakQ7QUFDRCxHQVBEO0FBUUQsQ0F2REQiLCJmaWxlIjoiTGF6YWRhUmVxdWVzdC50ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSB0ZXN0IHNjcmlwdCBmb3Igc3JjL0xhemFkYVJlcXVlc3RcbiAqL1xuY29uc3QgTGF6YWRhUmVxdWVzdCA9IHJlcXVpcmUoJ3NyYy9MYXphZGFSZXF1ZXN0JylcblxuY29uc3QgeyBpc1Jlc3BvbnNlU3VjY2Vzc2Z1bCwgZ2V0U3lzdGVtUXVlcnlQYXJhbU9iamVjdCB9ID0gTGF6YWRhUmVxdWVzdFxuXG5kZXNjcmliZSgndGVzdCBMYXphZGFSZXF1ZXN0LmpzJywgKCkgPT4ge1xuICB0ZXN0KCd0ZXN0IFtQT1NUXSBnZXRTeXN0ZW1RdWVyeVBhcmFtT2JqZWN0ICcsICgpID0+IHtcbiAgICBjb25zdCBrZXkgPSAnMTIzNCdcbiAgICBjb25zdCBzZWNyZXQgPSAnQWVmaTEyMzlhc3BiMjAzRlMnXG4gICAgY29uc3QgYXBpID0gJy90ZXN0L2FwaSdcbiAgICBjb25zdCB0b2tlbiA9ICdhYmMzMjEnXG4gICAgY29uc3QgYm9keSA9IHtcbiAgICAgIGZvbzogMSxcbiAgICAgIGJhcjogMixcbiAgICAgIGZvb19iYXI6IDMsXG4gICAgICBmb29iYXI6IDQsXG4gICAgfVxuICAgIGNvbnN0IHFzID0gZ2V0U3lzdGVtUXVlcnlQYXJhbU9iamVjdChrZXksIHNlY3JldCwgYXBpLCB0b2tlbiwgYm9keSlcbiAgICBleHBlY3QocXMpLnRvTWF0Y2hPYmplY3Qoe1xuICAgICAgYXBwX2tleTogJzEyMzQnLFxuICAgICAgdGltZXN0YW1wOiBleHBlY3QuYW55KFN0cmluZyksXG4gICAgICBzaWduX21ldGhvZDogJ3NoYTI1NicsXG4gICAgICBzaWduOiBleHBlY3QuYW55KFN0cmluZyksXG4gICAgfSlcbiAgfSlcbiAgdGVzdCgndGVzdCBbR0VUXSBnZXRTeXN0ZW1RdWVyeVBhcmFtT2JqZWN0JywgKCkgPT4ge1xuICAgIGNvbnN0IGtleSA9ICcxMjM0J1xuICAgIGNvbnN0IHNlY3JldCA9ICdBZWZpMTIzOWFzcGIyMDNGUydcbiAgICBjb25zdCBhcGkgPSAnL3Rlc3QvYXBpJ1xuICAgIGNvbnN0IHRva2VuID0gJ2FiYzMyMSdcbiAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICBmb286IDEsXG4gICAgICBiYXI6IDIsXG4gICAgICBmb29fYmFyOiAzLFxuICAgICAgZm9vYmFyOiA0LFxuICAgIH1cbiAgICBjb25zdCBxcyA9IE9iamVjdC5hc3NpZ24oXG4gICAgICB7fSxcbiAgICAgIGdldFN5c3RlbVF1ZXJ5UGFyYW1PYmplY3Qoa2V5LCBzZWNyZXQsIGFwaSwgdG9rZW4sIHBhcmFtcyksXG4gICAgICBwYXJhbXMsXG4gICAgKVxuICAgIGV4cGVjdChxcykudG9NYXRjaE9iamVjdCh7XG4gICAgICBmb286IDEsXG4gICAgICBiYXI6IDIsXG4gICAgICBmb29fYmFyOiAzLFxuICAgICAgZm9vYmFyOiA0LFxuICAgICAgYXBwX2tleTogJzEyMzQnLFxuICAgICAgdGltZXN0YW1wOiBleHBlY3QuYW55KFN0cmluZyksXG4gICAgICBzaWduX21ldGhvZDogJ3NoYTI1NicsXG4gICAgICBzaWduOiBleHBlY3QuYW55KFN0cmluZyksXG4gICAgfSlcbiAgfSlcbiAgdGVzdCgndGVzdCBpc1Jlc3BvbnNlU3VjY2Vzc2Z1bCcsICgpID0+IHtcbiAgICBleHBlY3QoaXNSZXNwb25zZVN1Y2Nlc3NmdWwobnVsbCkpLnRvQmUoZmFsc2UpXG4gICAgZXhwZWN0KGlzUmVzcG9uc2VTdWNjZXNzZnVsKHVuZGVmaW5lZCkpLnRvQmUoZmFsc2UpXG4gICAgZXhwZWN0KGlzUmVzcG9uc2VTdWNjZXNzZnVsKHsgZm9vOiAnYmFyJyB9KSkudG9CZShmYWxzZSlcbiAgICBleHBlY3QoaXNSZXNwb25zZVN1Y2Nlc3NmdWwoeyBjb2RlOiAnJyB9KSkudG9CZShmYWxzZSlcbiAgICBleHBlY3QoaXNSZXNwb25zZVN1Y2Nlc3NmdWwoeyBjb2RlOiAnTWlzc2luZ1BhcmFtcycgfSkpLnRvQmUoZmFsc2UpXG4gICAgZXhwZWN0KGlzUmVzcG9uc2VTdWNjZXNzZnVsKHsgY29kZTogJzAnIH0pKS50b0JlKHRydWUpXG4gIH0pXG59KVxuIl19