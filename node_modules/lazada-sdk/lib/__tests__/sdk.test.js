'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/**
 * @file test script for post-build code
 */

require('dotenv').config();
var appKey = process.env.LAZADA_APP_KEY;
var appSecret = process.env.LAZADA_APP_SECRET;
var countryCode = process.env.LAZADA_APP_COUNTRY;
var accessToken = process.env.LAZADA_APP_ACCESS_TOKEN;

var LazadaAPI = require('./..'); // sdk

describe('test sdk module', function () {
  test.skip('call generateAccessToken', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var api, payload, result;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            api = new LazadaAPI(appKey, appSecret, countryCode);
            payload = { code: '123' };
            _context.prev = 2;
            _context.next = 5;
            return api.generateAccessToken(payload);

          case 5:
            result = _context.sent;

            console.error(result);
            _context.next = 12;
            break;

          case 9:
            _context.prev = 9;
            _context.t0 = _context['catch'](2);

            console.error(_context.t0);

          case 12:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined, [[2, 9]]);
  })));

  test.skip('call refreshAccessToken', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
    var api, payload, result;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            api = new LazadaAPI(appKey, appSecret, countryCode);
            payload = { refresh_token: '123' };
            _context2.prev = 2;
            _context2.next = 5;
            return api.refreshAccessToken(payload);

          case 5:
            result = _context2.sent;

            console.error(result);
            _context2.next = 12;
            break;

          case 9:
            _context2.prev = 9;
            _context2.t0 = _context2['catch'](2);

            console.error(_context2.t0);

          case 12:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined, [[2, 9]]);
  })));

  test('test invoke api functions on SDK instance', function () {
    var api = new LazadaAPI(appKey, appSecret, countryCode);
    var functionNameList = [
    // system
    'generateAccessToken', 'refreshAccessToken',
    // logistics
    'getShipmentProviders',
    // products
    'getProducts', 'getCategoryTree', 'getCategoryAttributes', 'getBrands', 'createProduct', 'updateProduct', 'migrateImage', 'setImages', 'updatePriceQuantity', 'removeProduct',
    // orders
    'getOrders', 'getOrder', 'getOrderItems', 'getMultipleOrderItems', 'getFailureReasons', 'setStatusToCanceled', 'setStatusToReadyToShip', 'setStatusToPackedByMarketplace', 'setInvoiceNumber', 'getDocument'];

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = functionNameList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var functionName = _step.value;

        var func = api[functionName];
        expect(func instanceof Function).toBe(true);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fX3Rlc3RzX18vc2RrLnRlc3QuanMiXSwibmFtZXMiOlsicmVxdWlyZSIsImNvbmZpZyIsImFwcEtleSIsInByb2Nlc3MiLCJlbnYiLCJMQVpBREFfQVBQX0tFWSIsImFwcFNlY3JldCIsIkxBWkFEQV9BUFBfU0VDUkVUIiwiY291bnRyeUNvZGUiLCJMQVpBREFfQVBQX0NPVU5UUlkiLCJhY2Nlc3NUb2tlbiIsIkxBWkFEQV9BUFBfQUNDRVNTX1RPS0VOIiwiTGF6YWRhQVBJIiwiZGVzY3JpYmUiLCJ0ZXN0Iiwic2tpcCIsImFwaSIsInBheWxvYWQiLCJjb2RlIiwiZ2VuZXJhdGVBY2Nlc3NUb2tlbiIsInJlc3VsdCIsImNvbnNvbGUiLCJlcnJvciIsInJlZnJlc2hfdG9rZW4iLCJyZWZyZXNoQWNjZXNzVG9rZW4iLCJmdW5jdGlvbk5hbWVMaXN0IiwiZnVuY3Rpb25OYW1lIiwiZnVuYyIsImV4cGVjdCIsIkZ1bmN0aW9uIiwidG9CZSJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7O0FBSUFBLFFBQVEsUUFBUixFQUFrQkMsTUFBbEI7QUFDQSxJQUFNQyxTQUFTQyxRQUFRQyxHQUFSLENBQVlDLGNBQTNCO0FBQ0EsSUFBTUMsWUFBWUgsUUFBUUMsR0FBUixDQUFZRyxpQkFBOUI7QUFDQSxJQUFNQyxjQUFjTCxRQUFRQyxHQUFSLENBQVlLLGtCQUFoQztBQUNBLElBQU1DLGNBQWNQLFFBQVFDLEdBQVIsQ0FBWU8sdUJBQWhDOztBQUVBLElBQU1DLFlBQVlaLGVBQWxCLEMsQ0FBaUM7O0FBRWpDYSxTQUFTLGlCQUFULEVBQTRCLFlBQU07QUFDaENDLE9BQUtDLElBQUwsQ0FBVSwwQkFBViwwREFBc0M7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQzlCQyxlQUQ4QixHQUN4QixJQUFJSixTQUFKLENBQWNWLE1BQWQsRUFBc0JJLFNBQXRCLEVBQWlDRSxXQUFqQyxDQUR3QjtBQUU5QlMsbUJBRjhCLEdBRXBCLEVBQUVDLE1BQU0sS0FBUixFQUZvQjtBQUFBO0FBQUE7QUFBQSxtQkFJYkYsSUFBSUcsbUJBQUosQ0FBd0JGLE9BQXhCLENBSmE7O0FBQUE7QUFJNUJHLGtCQUo0Qjs7QUFLbENDLG9CQUFRQyxLQUFSLENBQWNGLE1BQWQ7QUFMa0M7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBT2xDQyxvQkFBUUMsS0FBUjs7QUFQa0M7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsR0FBdEM7O0FBV0FSLE9BQUtDLElBQUwsQ0FBVSx5QkFBViwwREFBcUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQzdCQyxlQUQ2QixHQUN2QixJQUFJSixTQUFKLENBQWNWLE1BQWQsRUFBc0JJLFNBQXRCLEVBQWlDRSxXQUFqQyxDQUR1QjtBQUU3QlMsbUJBRjZCLEdBRW5CLEVBQUVNLGVBQWUsS0FBakIsRUFGbUI7QUFBQTtBQUFBO0FBQUEsbUJBSVpQLElBQUlRLGtCQUFKLENBQXVCUCxPQUF2QixDQUpZOztBQUFBO0FBSTNCRyxrQkFKMkI7O0FBS2pDQyxvQkFBUUMsS0FBUixDQUFjRixNQUFkO0FBTGlDO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQU9qQ0Msb0JBQVFDLEtBQVI7O0FBUGlDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEdBQXJDOztBQVdBUixPQUFLLDJDQUFMLEVBQWtELFlBQU07QUFDdEQsUUFBTUUsTUFBTSxJQUFJSixTQUFKLENBQWNWLE1BQWQsRUFBc0JJLFNBQXRCLEVBQWlDRSxXQUFqQyxDQUFaO0FBQ0EsUUFBTWlCLG1CQUFtQjtBQUN2QjtBQUNBLHlCQUZ1QixFQUd2QixvQkFIdUI7QUFJdkI7QUFDQSwwQkFMdUI7QUFNdkI7QUFDQSxpQkFQdUIsRUFRdkIsaUJBUnVCLEVBU3ZCLHVCQVR1QixFQVV2QixXQVZ1QixFQVd2QixlQVh1QixFQVl2QixlQVp1QixFQWF2QixjQWJ1QixFQWN2QixXQWR1QixFQWV2QixxQkFmdUIsRUFnQnZCLGVBaEJ1QjtBQWlCdkI7QUFDQSxlQWxCdUIsRUFtQnZCLFVBbkJ1QixFQW9CdkIsZUFwQnVCLEVBcUJ2Qix1QkFyQnVCLEVBc0J2QixtQkF0QnVCLEVBdUJ2QixxQkF2QnVCLEVBd0J2Qix3QkF4QnVCLEVBeUJ2QixnQ0F6QnVCLEVBMEJ2QixrQkExQnVCLEVBMkJ2QixhQTNCdUIsQ0FBekI7O0FBRnNEO0FBQUE7QUFBQTs7QUFBQTtBQWdDdEQsMkJBQTJCQSxnQkFBM0IsOEhBQTZDO0FBQUEsWUFBbENDLFlBQWtDOztBQUMzQyxZQUFNQyxPQUFPWCxJQUFJVSxZQUFKLENBQWI7QUFDQUUsZUFBT0QsZ0JBQWdCRSxRQUF2QixFQUFpQ0MsSUFBakMsQ0FBc0MsSUFBdEM7QUFDRDtBQW5DcUQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQW9DdkQsR0FwQ0Q7QUFxQ0QsQ0E1REQiLCJmaWxlIjoic2RrLnRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIHRlc3Qgc2NyaXB0IGZvciBwb3N0LWJ1aWxkIGNvZGVcbiAqL1xuXG5yZXF1aXJlKCdkb3RlbnYnKS5jb25maWcoKVxuY29uc3QgYXBwS2V5ID0gcHJvY2Vzcy5lbnYuTEFaQURBX0FQUF9LRVlcbmNvbnN0IGFwcFNlY3JldCA9IHByb2Nlc3MuZW52LkxBWkFEQV9BUFBfU0VDUkVUXG5jb25zdCBjb3VudHJ5Q29kZSA9IHByb2Nlc3MuZW52LkxBWkFEQV9BUFBfQ09VTlRSWVxuY29uc3QgYWNjZXNzVG9rZW4gPSBwcm9jZXNzLmVudi5MQVpBREFfQVBQX0FDQ0VTU19UT0tFTlxuXG5jb25zdCBMYXphZGFBUEkgPSByZXF1aXJlKCdzcmMnKSAvLyBzZGtcblxuZGVzY3JpYmUoJ3Rlc3Qgc2RrIG1vZHVsZScsICgpID0+IHtcbiAgdGVzdC5za2lwKCdjYWxsIGdlbmVyYXRlQWNjZXNzVG9rZW4nLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgYXBpID0gbmV3IExhemFkYUFQSShhcHBLZXksIGFwcFNlY3JldCwgY291bnRyeUNvZGUpXG4gICAgY29uc3QgcGF5bG9hZCA9IHsgY29kZTogJzEyMycgfVxuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhcGkuZ2VuZXJhdGVBY2Nlc3NUb2tlbihwYXlsb2FkKVxuICAgICAgY29uc29sZS5lcnJvcihyZXN1bHQpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpXG4gICAgfVxuICB9KVxuXG4gIHRlc3Quc2tpcCgnY2FsbCByZWZyZXNoQWNjZXNzVG9rZW4nLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgYXBpID0gbmV3IExhemFkYUFQSShhcHBLZXksIGFwcFNlY3JldCwgY291bnRyeUNvZGUpXG4gICAgY29uc3QgcGF5bG9hZCA9IHsgcmVmcmVzaF90b2tlbjogJzEyMycgfVxuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhcGkucmVmcmVzaEFjY2Vzc1Rva2VuKHBheWxvYWQpXG4gICAgICBjb25zb2xlLmVycm9yKHJlc3VsdClcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihlcnJvcilcbiAgICB9XG4gIH0pXG5cbiAgdGVzdCgndGVzdCBpbnZva2UgYXBpIGZ1bmN0aW9ucyBvbiBTREsgaW5zdGFuY2UnLCAoKSA9PiB7XG4gICAgY29uc3QgYXBpID0gbmV3IExhemFkYUFQSShhcHBLZXksIGFwcFNlY3JldCwgY291bnRyeUNvZGUpXG4gICAgY29uc3QgZnVuY3Rpb25OYW1lTGlzdCA9IFtcbiAgICAgIC8vIHN5c3RlbVxuICAgICAgJ2dlbmVyYXRlQWNjZXNzVG9rZW4nLFxuICAgICAgJ3JlZnJlc2hBY2Nlc3NUb2tlbicsXG4gICAgICAvLyBsb2dpc3RpY3NcbiAgICAgICdnZXRTaGlwbWVudFByb3ZpZGVycycsXG4gICAgICAvLyBwcm9kdWN0c1xuICAgICAgJ2dldFByb2R1Y3RzJyxcbiAgICAgICdnZXRDYXRlZ29yeVRyZWUnLFxuICAgICAgJ2dldENhdGVnb3J5QXR0cmlidXRlcycsXG4gICAgICAnZ2V0QnJhbmRzJyxcbiAgICAgICdjcmVhdGVQcm9kdWN0JyxcbiAgICAgICd1cGRhdGVQcm9kdWN0JyxcbiAgICAgICdtaWdyYXRlSW1hZ2UnLFxuICAgICAgJ3NldEltYWdlcycsXG4gICAgICAndXBkYXRlUHJpY2VRdWFudGl0eScsXG4gICAgICAncmVtb3ZlUHJvZHVjdCcsXG4gICAgICAvLyBvcmRlcnNcbiAgICAgICdnZXRPcmRlcnMnLFxuICAgICAgJ2dldE9yZGVyJyxcbiAgICAgICdnZXRPcmRlckl0ZW1zJyxcbiAgICAgICdnZXRNdWx0aXBsZU9yZGVySXRlbXMnLFxuICAgICAgJ2dldEZhaWx1cmVSZWFzb25zJyxcbiAgICAgICdzZXRTdGF0dXNUb0NhbmNlbGVkJyxcbiAgICAgICdzZXRTdGF0dXNUb1JlYWR5VG9TaGlwJyxcbiAgICAgICdzZXRTdGF0dXNUb1BhY2tlZEJ5TWFya2V0cGxhY2UnLFxuICAgICAgJ3NldEludm9pY2VOdW1iZXInLFxuICAgICAgJ2dldERvY3VtZW50JyxcbiAgICBdXG5cbiAgICBmb3IgKGNvbnN0IGZ1bmN0aW9uTmFtZSBvZiBmdW5jdGlvbk5hbWVMaXN0KSB7XG4gICAgICBjb25zdCBmdW5jID0gYXBpW2Z1bmN0aW9uTmFtZV1cbiAgICAgIGV4cGVjdChmdW5jIGluc3RhbmNlb2YgRnVuY3Rpb24pLnRvQmUodHJ1ZSlcbiAgICB9XG4gIH0pXG59KVxuIl19