'use strict';

/**
 * @file test script for src/LazadaAPI
 */
var faker = require('faker');
var LazadaAPI = require('../LazadaAPI');

var _require = require('../LazadaClient/constants'),
    VENTURE = _require.VENTURE,
    GATEWAY = _require.GATEWAY;

describe('test LazadaAPI.js', function () {
  test('test create new LazadaAPI', function () {
    var appKey = faker.random.word();
    var appSecret = faker.random.uuid();
    var lazadaAPI = new LazadaAPI(appKey, appSecret, VENTURE.SINGAPORE);
    expect(lazadaAPI.appKey).toEqual(appKey);
    expect(lazadaAPI.appSecret).toEqual(appSecret);
    expect(lazadaAPI.gateway).toEqual(GATEWAY.SINGAPORE);
  });

  test('test create new LazadaAPI: missing appKey', function () {
    var createLazadaAPIObject = function createLazadaAPIObject() {
      return new LazadaAPI('', '', VENTURE.SINGAPORE);
    };
    expect(createLazadaAPIObject).toThrow();
  });

  test('test create new LazadaAPI: missing appSecret', function () {
    var appKey = faker.random.word();
    var createLazadaAPIObject = function createLazadaAPIObject() {
      return new LazadaAPI(appKey, '', VENTURE.SINGAPORE);
    };
    expect(createLazadaAPIObject).toThrow();
  });

  test('test create new LazadaAPI: missing countryCode', function () {
    var appKey = faker.random.word();
    var appSecret = faker.random.uuid();
    var createLazadaAPIObject = function createLazadaAPIObject() {
      return new LazadaAPI(appKey, appSecret, '');
    };
    expect(createLazadaAPIObject).toThrow();
  });

  test('test create new LazadaAPI: invalid countryCode', function () {
    var appKey = faker.random.word();
    var appSecret = faker.random.uuid();
    var countryCode = faker.random.number().toString();
    var createLazadaAPIObject = function createLazadaAPIObject() {
      return new LazadaAPI(appKey, appSecret, countryCode);
    };
    expect(createLazadaAPIObject).toThrow();
  });

  test('test correct LazadaAPI gateway', function () {
    var appKey = faker.random.word();
    var appSecret = faker.random.uuid();
    var lazadaAPI_SG = new LazadaAPI(appKey, appSecret, VENTURE.SINGAPORE);
    expect(lazadaAPI_SG.gateway).toEqual(GATEWAY.SINGAPORE);

    var lazadaAPI_TH = new LazadaAPI(appKey, appSecret, VENTURE.THAILAND);
    expect(lazadaAPI_TH.gateway).toEqual(GATEWAY.THAILAND);

    var lazadaAPI_MA = new LazadaAPI(appKey, appSecret, VENTURE.MALAYSIA);
    expect(lazadaAPI_MA.gateway).toEqual(GATEWAY.MALAYSIA);

    var lazadaAPI_VI = new LazadaAPI(appKey, appSecret, VENTURE.VIETNAM);
    expect(lazadaAPI_VI.gateway).toEqual(GATEWAY.VIETNAM);

    var lazadaAPI_PH = new LazadaAPI(appKey, appSecret, VENTURE.PHILIPPINES);
    expect(lazadaAPI_PH.gateway).toEqual(GATEWAY.PHILIPPINES);

    var lazadaAPI_IN = new LazadaAPI(appKey, appSecret, VENTURE.INDONESIA);
    expect(lazadaAPI_IN.gateway).toEqual(GATEWAY.INDONESIA);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fX3Rlc3RzX18vTGF6YWRhQVBJLnRlc3QuanMiXSwibmFtZXMiOlsiZmFrZXIiLCJyZXF1aXJlIiwiTGF6YWRhQVBJIiwiVkVOVFVSRSIsIkdBVEVXQVkiLCJkZXNjcmliZSIsInRlc3QiLCJhcHBLZXkiLCJyYW5kb20iLCJ3b3JkIiwiYXBwU2VjcmV0IiwidXVpZCIsImxhemFkYUFQSSIsIlNJTkdBUE9SRSIsImV4cGVjdCIsInRvRXF1YWwiLCJnYXRld2F5IiwiY3JlYXRlTGF6YWRhQVBJT2JqZWN0IiwidG9UaHJvdyIsImNvdW50cnlDb2RlIiwibnVtYmVyIiwidG9TdHJpbmciLCJsYXphZGFBUElfU0ciLCJsYXphZGFBUElfVEgiLCJUSEFJTEFORCIsImxhemFkYUFQSV9NQSIsIk1BTEFZU0lBIiwibGF6YWRhQVBJX1ZJIiwiVklFVE5BTSIsImxhemFkYUFQSV9QSCIsIlBISUxJUFBJTkVTIiwibGF6YWRhQVBJX0lOIiwiSU5ET05FU0lBIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7QUFHQSxJQUFNQSxRQUFRQyxRQUFRLE9BQVIsQ0FBZDtBQUNBLElBQU1DLFlBQVlELHVCQUFsQjs7ZUFDNkJBLG9DO0lBQXJCRSxPLFlBQUFBLE87SUFBU0MsTyxZQUFBQSxPOztBQUVqQkMsU0FBUyxtQkFBVCxFQUE4QixZQUFNO0FBQ2xDQyxPQUFLLDJCQUFMLEVBQWtDLFlBQU07QUFDdEMsUUFBTUMsU0FBU1AsTUFBTVEsTUFBTixDQUFhQyxJQUFiLEVBQWY7QUFDQSxRQUFNQyxZQUFZVixNQUFNUSxNQUFOLENBQWFHLElBQWIsRUFBbEI7QUFDQSxRQUFNQyxZQUFZLElBQUlWLFNBQUosQ0FBY0ssTUFBZCxFQUFzQkcsU0FBdEIsRUFBaUNQLFFBQVFVLFNBQXpDLENBQWxCO0FBQ0FDLFdBQU9GLFVBQVVMLE1BQWpCLEVBQXlCUSxPQUF6QixDQUFpQ1IsTUFBakM7QUFDQU8sV0FBT0YsVUFBVUYsU0FBakIsRUFBNEJLLE9BQTVCLENBQW9DTCxTQUFw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QWlDUCxRQUFRMkIsV0FBekMsQ0FBckI7QUFDQWhCLFdBQU9lLGFBQWFiLE9BQXBCLEVBQTZCRCxPQUE3QixDQUFxQ1gsUUFBUTBCLFdBQTdDOztBQUVBLFFBQU1DLGVBQWUsSUFBSTdCLFNBQUosQ0FBY0ssTUFBZCxFQUFzQkcsU0FBdEIsRUFBaUNQLFFBQVE2QixTQUF6QyxDQUFyQjtBQUNBbEIsV0FBT2lCLGFBQWFmLE9BQXBCLEVBQTZCRCxPQUE3QixDQUFxQ1gsUUFBUTRCLFNBQTdDO0FBQ0QsR0FwQkQ7QUFxQkQsQ0FqRUQiLCJmaWxlIjoiTGF6YWRhQVBJLnRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIHRlc3Qgc2NyaXB0IGZvciBzcmMvTGF6YWRhQVBJXG4gKi9cbmNvbnN0IGZha2VyID0gcmVxdWlyZSgnZmFrZXInKVxuY29uc3QgTGF6YWRhQVBJID0gcmVxdWlyZSgnc3JjL0xhemFkYUFQSScpXG5jb25zdCB7IFZFTlRVUkUsIEdBVEVXQVkgfSA9IHJlcXVpcmUoJ3NyYy9MYXphZGFDbGllbnQvY29uc3RhbnRzJylcblxuZGVzY3JpYmUoJ3Rlc3QgTGF6YWRhQVBJLmpzJywgKCkgPT4ge1xuICB0ZXN0KCd0ZXN0IGNyZWF0ZSBuZXcgTGF6YWRhQVBJJywgKCkgPT4ge1xuICAgIGNvbnN0IGFwcEtleSA9IGZha2VyLnJhbmRvbS53b3JkKClcbiAgICBjb25zdCBhcHBTZWNyZXQgPSBmYWtlci5yYW5kb20udXVpZCgpXG4gICAgY29uc3QgbGF6YWRhQVBJID0gbmV3IExhemFkYUFQSShhcHBLZXksIGFwcFNlY3JldCwgVkVOVFVSRS5TSU5HQVBPUkUpXG4gICAgZXhwZWN0KGxhemFkYUFQSS5hcHBLZXkpLnRvRXF1YWwoYXBwS2V5KVxuICAgIGV4cGVjdChsYXphZGFBUEkuYXBwU2VjcmV0KS50b0VxdWFsKGFwcFNlY3JldClcbiAgICBleHBlY3QobGF6YWRhQVBJLmdhdGV3YXkpLnRvRXF1YWwoR0FURVdBWS5TSU5HQVBPUkUpXG4gIH0pXG5cbiAgdGVzdCgndGVzdCBjcmVhdGUgbmV3IExhemFkYUFQSTogbWlzc2luZyBhcHBLZXknLCAoKSA9PiB7XG4gICAgY29uc3QgY3JlYXRlTGF6YWRhQVBJT2JqZWN0ID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBMYXphZGFBUEkoJycsICcnLCBWRU5UVVJFLlNJTkdBUE9SRSlcbiAgICB9XG4gICAgZXhwZWN0KGNyZWF0ZUxhemFkYUFQSU9iamVjdCkudG9UaHJvdygpXG4gIH0pXG5cbiAgdGVzdCgndGVzdCBjcmVhdGUgbmV3IExhemFkYUFQSTogbWlzc2luZyBhcHBTZWNyZXQnLCAoKSA9PiB7XG4gICAgY29uc3QgYXBwS2V5ID0gZmFrZXIucmFuZG9tLndvcmQoKVxuICAgIGNvbnN0IGNyZWF0ZUxhemFkYUFQSU9iamVjdCA9ICgpID0+IHtcbiAgICAgIHJldHVybiBuZXcgTGF6YWRhQVBJKGFwcEtleSwgJycsIFZFTlRVUkUuU0lOR0FQT1JFKVxuICAgIH1cbiAgICBleHBlY3QoY3JlYXRlTGF6YWRhQVBJT2JqZWN0KS50b1Rocm93KClcbiAgfSlcblxuICB0ZXN0KCd0ZXN0IGNyZWF0ZSBuZXcgTGF6YWRhQVBJOiBtaXNzaW5nIGNvdW50cnlDb2RlJywgKCkgPT4ge1xuICAgIGNvbnN0IGFwcEtleSA9IGZha2VyLnJhbmRvbS53b3JkKClcbiAgICBjb25zdCBhcHBTZWNyZXQgPSBmYWtlci5yYW5kb20udXVpZCgpXG4gICAgY29uc3QgY3JlYXRlTGF6YWRhQVBJT2JqZWN0ID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBMYXphZGFBUEkoYXBwS2V5LCBhcHBTZWNyZXQsICcnKVxuICAgIH1cbiAgICBleHBlY3QoY3JlYXRlTGF6YWRhQVBJT2JqZWN0KS50b1Rocm93KClcbiAgfSlcblxuICB0ZXN0KCd0ZXN0IGNyZWF0ZSBuZXcgTGF6YWRhQVBJOiBpbnZhbGlkIGNvdW50cnlDb2RlJywgKCkgPT4ge1xuICAgIGNvbnN0IGFwcEtleSA9IGZha2VyLnJhbmRvbS53b3JkKClcbiAgICBjb25zdCBhcHBTZWNyZXQgPSBmYWtlci5yYW5kb20udXVpZCgpXG4gICAgY29uc3QgY291bnRyeUNvZGUgPSBmYWtlci5yYW5kb20ubnVtYmVyKCkudG9TdHJpbmcoKVxuICAgIGNvbnN0IGNyZWF0ZUxhemFkYUFQSU9iamVjdCA9ICgpID0+IHtcbiAgICAgIHJldHVybiBuZXcgTGF6YWRhQVBJKGFwcEtleSwgYXBwU2VjcmV0LCBjb3VudHJ5Q29kZSlcbiAgICB9XG4gICAgZXhwZWN0KGNyZWF0ZUxhemFkYUFQSU9iamVjdCkudG9UaHJvdygpXG4gIH0pXG5cbiAgdGVzdCgndGVzdCBjb3JyZWN0IExhemFkYUFQSSBnYXRld2F5JywgKCkgPT4ge1xuICAgIGNvbnN0IGFwcEtleSA9IGZha2VyLnJhbmRvbS53b3JkKClcbiAgICBjb25zdCBhcHBTZWNyZXQgPSBmYWtlci5yYW5kb20udXVpZCgpXG4gICAgY29uc3QgbGF6YWRhQVBJX1NHID0gbmV3IExhemFkYUFQSShhcHBLZXksIGFwcFNlY3JldCwgVkVOVFVSRS5TSU5HQVBPUkUpXG4gICAgZXhwZWN0KGxhemFkYUFQSV9TRy5nYXRld2F5KS50b0VxdWFsKEdBVEVXQVkuU0lOR0FQT1JFKVxuXG4gICAgY29uc3QgbGF6YWRhQVBJX1RIID0gbmV3IExhemFkYUFQSShhcHBLZXksIGFwcFNlY3JldCwgVkVOVFVSRS5USEFJTEFORClcbiAgICBleHBlY3QobGF6YWRhQVBJX1RILmdhdGV3YXkpLnRvRXF1YWwoR0FURVdBWS5USEFJTEFORClcblxuICAgIGNvbnN0IGxhemFkYUFQSV9NQSA9IG5ldyBMYXphZGFBUEkoYXBwS2V5LCBhcHBTZWNyZXQsIFZFTlRVUkUuTUFMQVlTSUEpXG4gICAgZXhwZWN0KGxhemFkYUFQSV9NQS5nYXRld2F5KS50b0VxdWFsKEdBVEVXQVkuTUFMQVlTSUEpXG5cbiAgICBjb25zdCBsYXphZGFBUElfVkkgPSBuZXcgTGF6YWRhQVBJKGFwcEtleSwgYXBwU2VjcmV0LCBWRU5UVVJFLlZJRVROQU0pXG4gICAgZXhwZWN0KGxhemFkYUFQSV9WSS5nYXRld2F5KS50b0VxdWFsKEdBVEVXQVkuVklFVE5BTSlcblxuICAgIGNvbnN0IGxhemFkYUFQSV9QSCA9IG5ldyBMYXphZGFBUEkoYXBwS2V5LCBhcHBTZWNyZXQsIFZFTlRVUkUuUEhJTElQUElORVMpXG4gICAgZXhwZWN0KGxhemFkYUFQSV9QSC5nYXRld2F5KS50b0VxdWFsKEdBVEVXQVkuUEhJTElQUElORVMpXG5cbiAgICBjb25zdCBsYXphZGFBUElfSU4gPSBuZXcgTGF6YWRhQVBJKGFwcEtleSwgYXBwU2VjcmV0LCBWRU5UVVJFLklORE9ORVNJQSlcbiAgICBleHBlY3QobGF6YWRhQVBJX0lOLmdhdGV3YXkpLnRvRXF1YWwoR0FURVdBWS5JTkRPTkVTSUEpXG4gIH0pXG59KVxuIl19